import { useLocation, useParams } from "react-router-dom";
// import { Progress } from 'antd';
import { useMemo, useEffect, useState } from "react"
import Progress from "../../Components/CircularProgress/CircularProgress";
import axios from "axios";
import NextDivider from "../../Components/Divider/Divider";
// import { dataS } from "../../Data/Data";
import References from "../../Components/InfoComponents/References/References";
import Affected from "../../Components/InfoComponents/Affected/Affected";
import './vulnerability.css';
import { Spinner, input } from "@nextui-org/react";
import Footer from "../../Components/Footer/Footer";
import { useDataContext } from '../../util/DataContext';


function Vulnerability() {
  const { cveid } = useParams();

  const [loading, setLoading] = useState(true);
  const { vulnerabilityData } = useDataContext();
  const [data, setData] = useState([]);


  const location = useLocation();
  // Access the data on the receiving page
  const inputStatus = location.state && location.state.inputStatus;



  //Remeber to replace local data with api data

  // const memoizedFetchData = useMemo(() => async () => {
  //   await axios.get(import.meta.env.VITE_BASE_URL + "/" + `${cveid}`).
  //     then((response) => {
  //       setData(response.data)
  //       setLoading(false)
  //     }).catch((error) => {
  //       console.log(error)
  //     })
  // }, []);

  // useEffect(() => {
  //   window.scrollTo(0, 0);
  // const fetchFromServer = () => {
  // const data = memoizedFetchData();
  // setData(data)
  // }
  // if (inputStatus == true) {
  //   fetchFromServer()
  // } else {
  //   if (vulnerabilityData == null) {
  //     fetchFromServer()
  //   } else {
  //     setData(vulnerabilityData);
  //     setLoading(false);
  //   }
  // }
  // }, []);

  const fetchData = async () => {
    try {
      console.log("fron")
      const response = await axios.get(`${import.meta.env.VITE_BASE_URL}/${cveid}`);
      setData(response.data);
      setLoading(false);
    } catch (error) {
      console.log(error);
    }
  };

  const memoizedFetchData = useMemo(() => fetchData, []); // Memoize the fetchData function

  useEffect(() => {
    window.scrollTo(0, 0);

    const fetchFromServer = async () => {
      await memoizedFetchData(); // Call the memoized function
    };

    if (inputStatus) {
      fetchFromServer();
    } else {
      if (!vulnerabilityData) {
        fetchFromServer();
      } else {
        setData(vulnerabilityData);
        setLoading(false);
      }
    }
  }, [inputStatus, vulnerabilityData]); // Add dependencies to the dependency array




  const getLastBaseScore = (metrics) => {

    if (metrics != null) {
      if (Object.keys(metrics).length !== 0) {

        let lastBaseScore = null;
        let lastVectorString = null;
        let lastSeverity = null;

        const lastVersion = Object.values(metrics)[0][0];



        if (lastVersion && lastVersion.cvssData && lastVersion.cvssData.baseScore) {
          lastBaseScore = lastVersion.cvssData.baseScore;
        }
        if (
          lastVersion &&
          lastVersion.cvssData &&
          lastVersion.cvssData.vectorString
        ) {
          lastVectorString = lastVersion.cvssData.vectorString;
        }

        if (
          lastVersion &&
          lastVersion.cvssData &&
          lastVersion.cvssData.baseSeverity
        ) {
          lastSeverity = lastVersion.cvssData.baseSeverity;
        }

        return { lastBaseScore, lastVectorString, lastSeverity };

      }
    }
  }
  return <>
    {loading ? <div className="w-full h-screen flex justify-center align-content-center">
      <Spinner color="default" labelColor="foreground" /></div> :
      <div className="pt-[100px] lg:pt-[60px] sm:pt-[120px] container container-fluid ">
        {data ?

          <>
            <div className="flex flex-wrap justify-content-between align-items-center ml-[12px] mr-[12px] mb-[100px]">
              <NextDivider
                title={cveid} subTitle={data[0]?.mitreData.containers.cna.title}
                desc={data[0]?.cveData.cve.descriptions[0].value}
                assigner={data[0]?.mitreData.cveMetadata.assignerShortName}
                published={data[0]?.cveData.cve.published.toString().split("T")[0]}
                lastModified={data[0]?.cveData.cve.lastModified.toString().split("T")[0]}
                isloading={loading}
              />
              <div className="p-ctn">
                <Progress data={data[0]?.cveData.cve.metrics} type="dashboard" percent={getLastBaseScore(data[0]?.cveData.cve.metrics)?.lastBaseScore * 10} score={getLastBaseScore(data[0]?.cveData.cve.metrics)?.lastBaseScore} isloading={loading} />
              </div>
              <div className="arrow"></div>

            </div>
            <div className="lg:w-[58%] pl-0">
              <div>
                <Affected data={data[0]?.mitreData.containers.cna.affected} />
              </div>

              <div>
                <References data={data[0]?.cveData.cve.references} />
              </div>

            </div>

          </> : null
        }
      </div>
    }
    <Footer />
  </>;
}

export default Vulnerability;
