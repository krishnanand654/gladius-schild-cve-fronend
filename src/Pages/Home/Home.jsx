import Inputx from "../../Components/Input/Input";
import { useState, useEffect, useMemo } from "react";
import { useNavigate } from "react-router-dom";
import "./home.css";
import { Pagination, ConfigProvider } from 'antd';
import axios from "axios";
import Tablex from "../../Components/Table/Table";
import Table from "react-bootstrap/Table";
// import data from "../../Data/Data";
import { HistoryOutlined } from '@ant-design/icons'
import Footer from "../../Components/Footer/Footer";
import { useDataContext } from '../../util/DataContext';

function Home() {
  const [id, setId] = useState("");
  const [isValid, setIsValid] = useState(true);
  const [data, setData] = useState([])
  const { setVulnerabilityContextData } = useDataContext();

  const handleInputChange = (event) => {
    const inputValue = event.target.value;
    const cveRegex = /^CVE-(1999|[0-9][0-9][0-9][0-9])-\d{4,}$/;

    if (cveRegex.test(inputValue)) {
      setIsValid(true);
    } else {
      setIsValid(false);
    }

    setId(inputValue)
  };

  const inputStatus = true;
  const nav = useNavigate();
  const handleClick = (e) => {

    if (isValid) {
      if (e.key === "Enter") {
        nav(`/vulnerability/${id}`, { state: { inputStatus } });
      }
    }
  };

  const onUserClick = () => {
    nav(`/vulnerability/${id}`, { state: { inputStatus } });
  };

  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(0);
  // const [data, setData] = useState([]);

  const fetchData = async () => {
    try {
      setLoading(true);
      const response = await axios.get(`${import.meta.env.VITE_BASE_URL}/all/${page}`);
      setData(response.data);
      setError(null);
    } catch (error) {
      setError(error);
    } finally {
      setLoading(false);
    }
  };

  // Memoize the fetchData function to avoid unnecessary recreations
  const memoizedFetchData = useMemo(() => fetchData, [page]);

  useEffect(() => {
    memoizedFetchData();
  }, [page]);

  // You can use memoizedFetchData in your component as needed




  const getLastBaseScore = (metrics) => {
    if (Object.keys(metrics).length !== 0) {

      let lastBaseScore = null;
      let lastVectorString = null;
      let lastSeverity = null;

      const lastVersion = Object.values(metrics)[0][0];

      if (lastVersion && lastVersion.cvssData && lastVersion.cvssData.baseScore) {
        lastBaseScore = lastVersion.cvssData.baseScore;
      }
      if (
        lastVersion &&
        lastVersion.cvssData &&
        lastVersion.cvssData.vectorString
      ) {
        lastVectorString = lastVersion.cvssData.vectorString;
      }

      if (
        lastVersion &&
        lastVersion.cvssData &&
        lastVersion.cvssData.baseSeverity
      ) {
        lastSeverity = lastVersion.cvssData.baseSeverity;
      }

      return { lastBaseScore, lastVectorString, lastSeverity };

    }
  };

  return (
    <>
      <div className="container container-fluid  ">
        <div className="form-ctn flex flex-wrap justify-content-center h-[40rem] align-content-center section">
          <h1 className="leading-tight w-[54rem] mb-5 text-[70px] text-gray-200 font-extrabold " >Search and thy shall find the CVEs</h1>
          <div className="flex flex-wrap items-center justify-center w-100">

            <Inputx
              id={id}
              onKeyDown={handleClick}
              onChange={(e) => handleInputChange(e)}
              required={true}
              onUserClick={onUserClick}
              error={isValid}
            />
          </div>
        </div>
        {
          loading ? (
            <div className="loader-ctn ">
              <img className="loader" src="/loader.png" alt="load" />
            </div>
          ) : error ? (
            <div>Error: {error.message}</div>
          ) : (
            <>
              <h5 className="font-bold text-white mb-4"><HistoryOutlined /> Recent records</h5>
              <Table responsive="sm" w-fill striped bordered hover variant="light" className="table table-responsive-lg table-dark">
                <thead>
                  <tr>
                    <th>Release Date</th>
                    <th>Last Modified Date</th>
                    <th>CVE Number</th>
                    <th>BaseScore</th>
                    <th>Severity</th>
                    <th>Vendor</th>
                  </tr>
                </thead>
                <tbody>
                  {data.length === undefined ? setLoading(true) : null}
                  {data.length ? (
                    data.map((data) => {
                      return (
                        <Tablex
                          key={data.cveData.cve.id}
                          id={data.cveData.cve.id}
                          releaseDate={data.cveData.cve.published.toString().split("T")[0]}
                          lastUpdated={data.cveData.cve.lastModified.toString().split("T")[0]}
                          bscore={getLastBaseScore(data.cveData.cve.metrics) ? getLastBaseScore(data.cveData.cve.metrics).lastBaseScore : "n/a"}
                          severity={getLastBaseScore(data.cveData.cve.metrics) ? getLastBaseScore(data.cveData.cve.metrics).lastSeverity : "n/a"}
                          vendor={data.mitreData.containers.cna.affected ? data.mitreData.containers.cna.affected[0].vendor : "n/a"}
                          extraData={data}
                          onUserClick={() => setVulnerabilityContextData(data)}
                        />
                      );
                    })
                  ) : (
                    loading && <>
                      <div className="loader-ctn ">
                        <img className="loader" src="/loader.png" alt="load" />
                      </div></>
                  )}
                </tbody>
              </Table>
            </>
          )
        }
        <div className="flex justify-content-center mb-5 in-ctn">
          <ConfigProvider
            theme={{
              token: {
                // Seed Token
                colorPrimary: 'white',
                colorBgContainer: 'black',
                itemInputBg: "black",
                colorText: "white",
                colorTextPlaceholder: "white",
                itemActiveBg: "black"
              },
            }}
          >
            <Pagination showQuickJumper className="text-white bg-bla pb-5" style={{ backgroundColor: 'black' }} defaultCurrent={1} onChange={(e) => { setPage(e) }} total={5000} />
          </ConfigProvider>
        </div>
      </div >
      <Footer />
    </>
  );

}

export default Home;
